/*
Prefix parser for probabilistic context free grammars.
The program computes the probability that a string is 
a prefix of a string generated by the grammar. 
From 
T. Sato, P. Meyer, Tabling for infinite probability computation, in: 
International Conference on Logic Programming, Vol. 17 of LIPIcs, 2012, 
pp.  348-358.
T. Sato, P. Meyer, Infinite probability computation by cyclic explanation
graphs, Theory and Practice of Logic Programming 14 (2014) 909-937.
doi:10.1017/S1471068413000562.
*/

:- use_module('../mcintyre').

:- if(current_predicate(use_rendering/1)).
:- use_rendering(c3).
:- endif.

:- cplint.

% State Formulae 
models(S, prop(A)) :-
  holds(S,A).
models(S, neg(A)) :-
  \+ models(S,A).
models(S, and(SF1, SF2)):-
  models(S, SF1),
  models(S, SF2).
models(S, pr(PF, gt, B)) :-
  prob(pmodels(S, PF), P),
  P > B.
models(S, pr(PF, geq, B)) :-
  prob(pmodels(S, PF), P),
  P >= B.
% Path Formulae
pmodels(S, PF) :-
  pmodels(S, PF, _).

pmodels(S, until(_SF1, SF2), _H) :-
  models(S,SF2).
pmodels(S, until(SF1, SF2), H) :-
  models(S, SF1),
  trans(S, H, T),
  pmodels(T, until(SF1, SF2), next(H)).
pmodels(S, next(SF), H) :-
  trans(S, H, T),
  pmodels(T, SF).

% reach(S, I, T) starting at state S at instance I,
%   state T is reachable.
reach(S, I, T) :-
  trans(S, I, U),
  reach(U, next(I), T).

reach(S, _, S).

% trans(S,I,T) transition from S at instance I goes to T

trans(s0,S,s0):0.5; trans(s0,S,s1):0.3; trans(s0,S,s2):0.2.

trans(s1,S,s1):0.4; trans(s1,S,s3):0.1; trans(s1,S,s4):0.5.

trans(s4,_,s3).
:- end_cplint.



/** <examples>

?- prob(reach(s0,0,s0),P).
% expecte result ~ 1.

?- prob(reach(s0,0,s1),P).
% expecte result ~ 0.5984054054054054.

?- prob(reach(s0,0,s2),P).
% expecte result ~ 0.4025135135135135.

?- prob(reach(s0,0,s3),P).
% expecte result ~ 0.5998378378378378.

?- prob(reach(s0,0,s4),P).
% expecte result ~ 0.49948717948717947.

?- prob(reach(s1,0,s0),P).
% expecte result ~ 0.

*/

