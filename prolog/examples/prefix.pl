/*
Prefix parser for probabilistic context free grammars.
The program computes the probability that a string is 
a prefix of a string generated by the grammar. 
From 
T. Sato, P. Meyer, Tabling for infinite probability computation, in: 
International Conference on Logic Programming, Vol. 17 of LIPIcs, 2012, 
pp.  348-358.
T. Sato, P. Meyer, Infinite probability computation by cyclic explanation
graphs, Theory and Practice of Logic Programming 14 (2014) 909-937.
doi:10.1017/S1471068413000562.
*/

:- use_module('../mcintyre').

:- if(current_predicate(use_rendering/1)).
:- use_rendering(c3).
:- endif.

:- cplint.
% grammar
% 0.4:S->SS
% 0.3:S->a
% 0.3:S->b
pre_pcfg(L):- pre_pcfg(['S'],[],_D,L,[]).

pre_pcfg([A|_R],D0,D,L0,[]):-
  rule(A,D0,RHS),      % A is a nonterminal
  pre_pcfg(RHS,[rule(A,D,RHS)|D0],D,L0,[]). % pseudo success, R is discarded

pre_pcfg([A|R],D0,D,L0,L2):-
  rule(A,D0,RHS),      % rule A->RHS is selected
  pre_pcfg(RHS,[rule(A,D,RHS)|D0],D1,L0,L1), % recursion
  pre_pcfg(R,D1,D,L1,L2).   % recursion

pre_pcfg([A|R],D0,D,[A|L1],L2):-
  \+ rule(A,_,_),     % A is a terminal, consume A
  pre_pcfg(R,D0,D,L1,L2).

pre_pcfg([],D,D,L,L).      % termination

rule('S',D,['S','S']):0.4; rule('S',D,[a]):0.3; 
  rule('S',D,[b]):0.3.



:- end_cplint.


/** <examples>

?- prob(pre_pcfg([a]),P).
% expected result ~ 0.5.

?- prob(pre_pcfg([a,b]),P).
% expected result ~ 0.09692857142857143.

?- prob(pre_pcfg([b]),P).
% expected result ~ 0.49946153846153846.

?- prob(pre_pcfg([a,b,a]),P).
% expected result ~ 0.019333333333333334.

?- prob(pre_pcfg([b,a]),P).
% expected result ~ 0.1014.


*/
 
